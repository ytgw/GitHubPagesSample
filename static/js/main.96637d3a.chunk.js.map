{"version":3,"sources":["index.tsx"],"names":["Square","props","style","isHighlight","className","onClick","value","Board","i","this","squares","board","winnerLine","calculateWinner","line","row","boardRow","col","squareIndex","includes","concat","renderSquare","React","Component","Move","desc","historyIndex","player","location","stepNumber","Game","state","history","Array","fill","xIsNext","isReverse","slice","length","winner","setState","step","moves","move","getLocation","jumpTo","status","current","renderMoves","handleClick","toggleSortOrder","reverse","rootElement","lines","a","b","c","previousSquares","currentSquares","Error","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"oOAkBA,SAASA,EAAOC,GACd,IAAMC,EAA6BD,EAAME,YAAc,CAAC,WAAc,UAAY,GAClF,OACE,wBAAQC,UAAU,SAASC,QAASJ,EAAMI,QAASH,MAAOA,EAA1D,SACGD,EAAMK,Q,IAYPC,E,2KACSC,EAAWL,GAAoC,IAAD,OACzD,OACE,cAACH,EAAD,CACEM,MAAOG,KAAKR,MAAMS,QAAQF,GAC1BH,QAAS,kBAAY,EAAKJ,MAAMI,QAAQG,IACxCL,YAAaA,GACRK,K,+BAST,IAHA,IACIG,EAAuB,GACrBC,EAA8BC,EAAgBJ,KAAKR,MAAMS,SAASI,KAC/DC,EAAM,EAAGA,EAHA,EAGiBA,IAAO,CAExC,IADA,IAAIC,EAA0B,GACrBC,EAAM,EAAGA,EALF,EAKmBA,IAAO,CACxC,IAAMC,EANQ,EAMkBH,EAAME,EAClCd,OAAW,EAEbA,EADiB,OAAfS,GACYA,EAAWO,SAASD,GAIpCF,EAAWA,EAASI,OAAO,CAACX,KAAKY,aAAaH,EAAaf,KAE7DQ,EAAQA,EAAMS,OAAO,CAAC,qBAAKhB,UAAU,YAAf,SAAsCY,GAAND,KAExD,OAAO,8BAAMJ,Q,GA9BGW,IAAMC,WA6CpBC,E,uKAGF,IACIC,EADEC,EAAejB,KAAKR,MAAMyB,aAEhC,GAAqB,IAAjBA,EACFD,EAAO,uBACF,CACL,IAAME,EAASlB,KAAKR,MAAM2B,SAASD,OAC7BZ,EAAMN,KAAKR,MAAM2B,SAASb,IAC1BE,EAAMR,KAAKR,MAAM2B,SAASX,IAChCQ,EAAI,sBAAkBC,EAAlB,qBAA2CC,EAA3C,iBAA0DZ,EAA1D,iBAAsEE,GAG5E,IAAMf,EACHwB,IAAiBjB,KAAKR,MAAM4B,WAAc,CAAC,WAAc,UAAY,GAExE,OACE,6BACE,wBAAQxB,QAASI,KAAKR,MAAMI,QAASH,MAAOA,EAA5C,SAAoDuB,KAD7CC,O,GAlBIJ,IAAMC,WAkCnBO,E,kDACJ,WAAY7B,GAA+B,IAAD,8BACxC,cAAMA,IACD8B,MAAQ,CACXC,QAAS,CAAC,CACRtB,QAASuB,MAAkB,GAAGC,KAAK,QAErCL,WAAY,EACZM,SAAS,EACTC,WAAW,GAR2B,E,wDAY9B5B,GACV,IAAMwB,EAAUvB,KAAKsB,MAAMC,QAAQK,MAAM,EAAG5B,KAAKsB,MAAMF,WAAa,GAE9DnB,EADUsB,EAAQA,EAAQM,OAAS,GACjB5B,QAAQ2B,QAC5BxB,EAAgBH,GAAS6B,QAAU7B,EAAQF,KAG/CE,EAAQF,GAAKC,KAAKsB,MAAMI,QAAU,IAAM,IACxC1B,KAAK+B,SAAS,CACZR,QAASA,EAAQZ,OAAO,CAAC,CACvBV,QAASA,KAEXmB,WAAYG,EAAQM,OACpBH,SAAU1B,KAAKsB,MAAMI,a,6BAIlBM,GACLhC,KAAK+B,SAAS,CACZX,WAAYY,EACZN,QAAUM,EAAO,IAAO,M,kCAIhBT,GAEV,IAFgD,IAAD,OAC3CU,EAAuB,GADoB,WAEtClC,GACP,IAAMmC,EACJ,cAACnB,EAAD,CACEI,SAAUgB,EAAYZ,EAASxB,GAC/BkB,aAAclB,EACdqB,WAAY,EAAKE,MAAMF,WACvBxB,QAAS,kBAAY,EAAKwC,OAAOrC,KAC5BA,GAETkC,EAAQA,EAAMtB,OAAO,CAACuB,KATfnC,EAAI,EAAGA,EAAIwB,EAAQM,OAAQ9B,IAAM,EAAjCA,GAWT,OAAOkC,I,wCAIPjC,KAAK+B,SAAS,CAACJ,WAAY3B,KAAKsB,MAAMK,c,+BAGjB,IAMjBU,EANgB,OACdd,EAAUvB,KAAKsB,MAAMC,QACrBe,EAAUf,EAAQvB,KAAKsB,MAAMF,YAC7BU,EAAS1B,EAAgBkC,EAAQrC,SAAS6B,OAC1CG,EAAQjC,KAAKuC,YAAYhB,GAW/B,OAPEc,EADEP,EACO,WAAaA,EACa,IAA1B9B,KAAKsB,MAAMF,WACX,OAEA,iBAAmBpB,KAAKsB,MAAMI,QAAU,IAAM,KAIvD,sBAAK/B,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASqC,EAAQrC,QACjBL,QAAS,SAACG,GAAD,OAAqB,EAAKyC,YAAYzC,QAGnD,sBAAKJ,UAAU,YAAf,UACE,8BAAM0C,IACN,wBAAQzC,QAAS,kBAAY,EAAK6C,mBAAlC,SAAsD,0BACtD,6BAAKzC,KAAKsB,MAAMK,UAAYM,EAAML,QAAQc,UAAYT,c,GAnF7CpB,IAAMC,WA4FnB6B,EACJ,gCACE,6CACA,cAACtB,EAAD,OAcJ,SAASjB,EAAgBH,GAWvB,IAVA,IAAM2C,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7C,EAAI,EAAGA,EAAI6C,EAAMf,OAAQ9B,IAAK,CAAC,IAAD,cACnB6C,EAAM7C,GADa,GAC9B8C,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9C,EAAQ4C,IAAM5C,EAAQ4C,KAAO5C,EAAQ6C,IAAM7C,EAAQ4C,KAAO5C,EAAQ8C,GACpE,MAAO,CAACjB,OAAQ7B,EAAQ4C,GAAIxC,KAAMuC,EAAM7C,IAG5C,MAAO,CAAC+B,OAAQ,KAAMzB,KAAM,MAI9B,SAAS8B,EAAYZ,EAAsBW,GACzC,IACIzB,EAA4B,KAEhC,GAAIyB,GAAQ,EACV,MAAO,CAAC1B,KAAM,EAAGF,KAAM,EAAGY,OAAQ,MAKpC,IAFA,IAAM8B,EAA+BzB,EAAQW,EAAO,GAAGjC,QACjDgD,EAA8B1B,EAAQW,GAAMjC,QACzCF,EAAI,EAAGA,EAAIkD,EAAepB,OAAQ9B,IACrCiD,EAAgBjD,KAAOkD,EAAelD,KACxCU,EAAcV,GAGlB,GAAoB,OAAhBU,EACF,MAAM,IAAIyC,MAAM,uBAElB,MAAO,CACL1C,IAAKC,EAlBW,EAkBe,EAC/BH,IAAK6C,KAAKC,MAAM3C,EAnBA,GAmB2B,EAC3CS,OAAQ+B,EAAexC,IApD3B4C,IAASC,OACPX,EACAY,SAASC,eAAe,W","file":"static/js/main.96637d3a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// ========================================\n\ntype PlayerType = 'X' | 'O'\ntype SquareType = PlayerType | null\ntype SquaresType = SquareType[]\n\n// ========================================\n\ntype SquarePropsType = {\n  value: PlayerType | null,\n  onClick: () => void,\n  isHighlight: boolean\n}\n\nfunction Square(props: SquarePropsType): JSX.Element {\n  const style: React.CSSProperties = props.isHighlight ? {'background': 'yellow'} : {};\n  return (\n    <button className=\"square\" onClick={props.onClick} style={style}>\n      {props.value}\n    </button>\n  );\n}\n\n// ========================================\n\ntype BoardPropsType = {\n  squares: SquaresType,\n  onClick: (i: number) => void\n}\n\nclass Board extends React.Component<BoardPropsType> {\n  renderSquare(i: number, isHighlight: boolean): JSX.Element {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={(): void => this.props.onClick(i)}\n        isHighlight={isHighlight}\n        key={i}\n      />\n    );\n  }\n\n  render(): JSX.Element {\n    const boardSize = 3;\n    let board: JSX.Element[] = [];\n    const winnerLine: number[] | null = calculateWinner(this.props.squares).line;\n    for (let row = 0; row < boardSize; row++) {\n      let boardRow: JSX.Element[] = [];\n      for (let col = 0; col < boardSize; col++) {\n        const squareIndex = boardSize * row + col;\n        let isHighlight;\n        if (winnerLine !== null) {\n          isHighlight = winnerLine.includes(squareIndex);\n        } else {\n          isHighlight = false;\n        }\n        boardRow = boardRow.concat([this.renderSquare(squareIndex, isHighlight)]);\n      }\n      board = board.concat([<div className=\"board-row\" key={row}>{boardRow}</div>]);\n    }\n    return <div>{board}</div>;\n  }\n}\n\n// ========================================\n\ntype HistoryType = {squares: SquaresType}[]\ntype MovePropsType = {\n  location: GetLocationResultType,\n  // history: HistoryType,\n  historyIndex: number,\n  stepNumber: number,\n  onClick: () => void,\n}\n\nclass Move extends React.Component<MovePropsType> {\n  render(): JSX.Element {\n    // const history = this.props.history;\n    const historyIndex = this.props.historyIndex;\n    let desc: string;\n    if (historyIndex === 0) {\n      desc = 'Go to game start';\n    } else {\n      const player = this.props.location.player as PlayerType;\n      const row = this.props.location.row;\n      const col = this.props.location.col;\n      desc = `Go to move #${historyIndex} - player:${player}, row:${row}, col:${col}`;\n    }\n\n    const style: React.CSSProperties =\n      (historyIndex === this.props.stepNumber) ? {'fontWeight': 'bolder'} : {};\n\n    return (\n      <li key={historyIndex}>\n        <button onClick={this.props.onClick} style={style}>{desc}</button>\n      </li>\n    );\n  }\n}\n\n// ========================================\n\ntype GameStateType = {\n  history: HistoryType,\n  stepNumber: number,\n  xIsNext: boolean,\n  isReverse: boolean,\n}\n\nclass Game extends React.Component<Record<string, never>, GameStateType> {\n  constructor(props: Record<string, never>) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array<SquareType>(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isReverse: false,\n    };\n  }\n\n  handleClick(i: number): void {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step: number): void {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  renderMoves(history: HistoryType): JSX.Element[] {\n    let moves: JSX.Element[] = [];\n    for (let i = 0; i < history.length; i++) {\n      const move: JSX.Element =\n        <Move\n          location={getLocation(history, i)}\n          historyIndex={i}\n          stepNumber={this.state.stepNumber}\n          onClick={(): void => this.jumpTo(i)}\n          key={i}\n        />;\n      moves = moves.concat([move]);\n    }\n    return moves;\n  }\n\n  toggleSortOrder(): void {\n    this.setState({isReverse: !this.state.isReverse});\n  }\n\n  render(): JSX.Element {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares).winner;\n    const moves = this.renderMoves(history);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (this.state.stepNumber === 9) {\n      status = 'Draw';\n    }else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i: number): void => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={(): void => this.toggleSortOrder()}>{'toggle location order'}</button>\n          <ol>{this.state.isReverse ? moves.slice().reverse() : moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nconst rootElement: JSX.Element = (\n  <div>\n    <h1>Tic Tac Toe</h1>\n    <Game />\n  </div>\n);\n\nReactDOM.render(\n  rootElement,\n  document.getElementById('root')\n);\n\ntype CalculateWinnerResultType = {\n  winner: PlayerType | null,\n  line: number[] | null\n};\n\nfunction calculateWinner(squares: SquaresType): CalculateWinnerResultType {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner: squares[a], line: lines[i]};\n    }\n  }\n  return {winner: null, line: null};\n}\n\ntype GetLocationResultType = {col: number, row: number, player: PlayerType | null}\nfunction getLocation(history: HistoryType, move: number): GetLocationResultType {\n  const boardSize = 3;\n  let squareIndex: number| null = null;\n\n  if (move <= 0) {\n    return {col: -1, row: -1, player: null};\n  }\n\n  const previousSquares: SquaresType = history[move - 1].squares;\n  const currentSquares: SquaresType = history[move].squares;\n  for (let i = 0; i < currentSquares.length; i++) {\n    if (previousSquares[i] !== currentSquares[i]){\n      squareIndex = i;\n    }\n  }\n  if (squareIndex === null) {\n    throw new Error('squareIndex is null');\n  }\n  return {\n    col: squareIndex % boardSize + 1,\n    row: Math.floor(squareIndex / boardSize) + 1,\n    player: currentSquares[squareIndex]\n  };\n}\n"],"sourceRoot":""}